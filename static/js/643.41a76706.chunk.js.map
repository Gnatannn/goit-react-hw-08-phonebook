{"version":3,"file":"static/js/643.41a76706.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  list-style: none;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 0;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 50%;\n  min-width: 100px;\n  max-width: 300px;\n  height: 100px;\n  border: 1px solid green;\n  padding: 15px;\n  text-align: center;\n  border-radius: 5px;\n  :hover {\n    border: 2px solid green;\n  }\n`;\n\nexport const ListItemHeader = styled.h2`\n  margin: 0;\n  margin-bottom: auto;\n`;\n\nexport const ListItemText = styled.p`\n  margin: 0;\n  font-weight: 600;\n`;\n\nexport const ListItemButton = styled.button`\n  width: 70px;\n  background-color: green;\n  color: white;\n  border: none;\n  border-radius: 50px;\n  padding: 5px;\n  margin-top: 5px;\n  :hover {\n    background-color: red;\n    opacity: 0.85;\n  }\n`;\n","export const selectLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n\nexport const selectError = state => state.contacts.error;\n","import {\n  List,\n  ListItem,\n  ListItemHeader,\n  ListItemText,\n  ListItemButton,\n} from 'components/ContactList/ContactList.styled.js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteCard } from 'redux/contacts/operations';\nimport { selectAllContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contactsList = useSelector(selectAllContacts);\n  const filter = useSelector(selectFilter);\n\n  const onFilterContact = () => {\n    return contactsList.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const deleteContact = contactId => {\n    dispatch(deleteCard(contactId));\n  };\n\n  const findContacts = onFilterContact();\n\n  return (\n    <List>\n      {findContacts.map(({ name, number, id }) => {\n        return (\n          <ListItem key={id}>\n            <ListItemHeader>{name}</ListItemHeader>\n            <ListItemText>{number}</ListItemText>\n            <ListItemButton type=\"button\" onClick={() => deleteContact(id)}>\n              Delete\n            </ListItemButton>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const Input = styled.input`\n  width: 250px;\n  height: 30px;\n  margin-bottom: 15px;\n  padding: 5px;\n  border-radius: 5px;\n  border: solid 2px green;\n`;\n\nexport const Label = styled.label`\n  font-size: 24px;\n  font-weight: 500;\n  margin-bottom: 5px;\n`;\n","import { Wrapper, Input, Label } from 'components/Filter/Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilterChange = e => {\n    dispatch(updateFilter(e.currentTarget.value));\n  };\n\n  return (\n    <Wrapper>\n      <Label htmlFor=\"text\">Find contacts by name</Label>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Please find ...\"\n        value={filter}\n        onChange={onFilterChange}\n      />\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormElement = styled(Form)`\n  display: flex;\n  align-items: center;\n  /* justify-content: center; */\n  flex-direction: column;\n`;\n\nexport const InputElement = styled(Field)`\n  margin: 5px;\n  width: 250px;\n  height: 30px;\n  border: solid 2px green;\n  border-radius: 5px;\n  padding: 5px;\n`;\n\nexport const Label = styled.label`\n  font-size: 20px;\n  font-weight: 700;\n  margin-bottom: 5px;\n`;\n\nexport const ButtonSubmit = styled.button`\n  width: 150px;\n  height: 40px;\n  font-weight: 700;\n  background-color: green;\n  color: white;\n  border: none;\n  border-radius: 30px;\n  margin-top: 10px;\n  opacity: 0.8;\n  :hover {\n    opacity: 1;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  text-align: center;\n  color: red;\n  font-size: 12px;\n`;\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  FormElement,\n  InputElement,\n  Label,\n  ButtonSubmit,\n  Error,\n} from 'components/ContactForm/ContactForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup\n    .string()\n    .min(4)\n    .max(10)\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contactsList = useSelector(selectAllContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const sameContact = checkContactsBook(values, contactsList);\n    if (sameContact) {\n      alert(`${values.name} has been already added`);\n    } else {\n      dispatch(addContact(values));\n      resetForm();\n    }\n  };\n\n  const checkContactsBook = (contact, contactsList) => {\n    return contactsList.find(\n      item => item.name.toLowerCase() === contact.name.toLowerCase()\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormElement autoComplete=\"off\">\n        <Label htmlFor=\"name\">Name</Label>\n        <InputElement type=\"text\" name=\"name\" placeholder=\"Name\" />\n        <Error name=\"name\" component=\"div\" />\n\n        <Label htmlFor=\"number\">Number</Label>\n        <InputElement type=\"tel\" name=\"number\" placeholder=\"Telephone number\" />\n        <Error name=\"number\" component=\"div\" />\n        <ButtonSubmit type=\"submit\">Add contact</ButtonSubmit>\n      </FormElement>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.main`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport const LoadingMessage = styled.div`\n  font-size: 15px;\n  font-weight: 700;\n  text-align: center;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectLoading,\n  selectError,\n  selectAllContacts,\n} from 'redux/contacts/selectors';\n\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Container } from 'pages/Contacts/Contacts.styled';\nimport { Spinner } from 'components/Spinner/Spinner';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const items = useSelector(selectAllContacts);\n  const isLoading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      {items.length > 0 && (\n        <>\n          <h2>Contacts</h2>\n          <Filter />\n        </>\n      )}\n      {isLoading && !error && <Spinner />}\n      <ContactList />\n\n      {error && <p> {error} </p>}\n    </Container>\n  );\n}\n"],"names":["List","styled","ListItem","ListItemHeader","ListItemText","ListItemButton","selectLoading","state","contacts","isLoading","selectFilter","filter","selectAllContacts","items","selectError","error","ContactList","dispatch","useDispatch","contactsList","useSelector","findContacts","contact","name","toLowerCase","includes","map","number","id","type","onClick","contactId","deleteCard","Wrapper","Input","Label","Filter","htmlFor","placeholder","value","onChange","e","updateFilter","currentTarget","FormElement","Form","InputElement","Field","ButtonSubmit","Error","ErrorMessage","schema","yup","shape","matches","required","min","max","initialValues","ContactForm","checkContactsBook","find","item","validationSchema","onSubmit","values","resetForm","alert","addContact","autoComplete","component","Container","Contacts","useEffect","fetchContacts","length","Spinner"],"sourceRoot":""}